{"version":3,"sources":["rules/typeIdMatch.js"],"names":[],"mappings":";;;;;AAAO,IAAM,0BAAS,CAClB;AACI,UAAM,QAAN;CAFc,CAAT;;kBAME,UAAC,OAAD,EAAa;AACxB,QAAM,UAAU,IAAI,MAAJ,CAAW,QAAQ,OAAR,CAAgB,CAAhB,KAAsB,yBAAtB,CAArB,CADkB;;AAGxB,WAAO;AACH,sCAAW,eAAe;AACtB,gBAAM,qBAAqB,cAAc,EAAd,CAAiB,IAAjB,CADL;;AAGtB,gBAAI,CAAC,QAAQ,IAAR,CAAa,kBAAb,CAAD,EAAmC;AACnC,wBAAQ,MAAR,CAAe,aAAf,EAA8B,sEAA9B,EAAsG;AAClG,0BAAM,kBAAN;AACA,6BAAS,QAAQ,QAAR,EAAT;iBAFJ,EADmC;aAAvC;SAJD;KAAP,CAHwB;CAAb","file":"rules/typeIdMatch.js","sourcesContent":["export const schema = [\n    {\n        type: 'string'\n    }\n];\n\nexport default (context) => {\n    const pattern = new RegExp(context.options[0] || '^Type([A-Z][a-z0-9]+)+$');\n\n    return {\n        TypeAlias (typeAliasNode) {\n            const typeIdentifierName = typeAliasNode.id.name;\n\n            if (!pattern.test(typeIdentifierName)) {\n                context.report(typeAliasNode, 'Type identifier \\'{{name}}\\' does not match pattern \\'{{pattern}}\\'.', {\n                    name: typeIdentifierName,\n                    pattern: pattern.toString()\n                });\n            }\n        }\n    };\n};\n"],"sourceRoot":"/source/"}